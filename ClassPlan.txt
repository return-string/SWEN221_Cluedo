PUBLIC METHODS AND CONSTRUCTORS
===============================

Working pannel dimentions: 800X600

Controller:
----------------

public void startGame(Set<String> players){}

public void repaintBoard(Graphics g)

public void nextTurn()

public void testHypothesis(Set<String> hypothesis)

public boolean checkGameState()


Game:
---------------------------------

public Game(Map<String, String> players)

/**@return True if game is still going. False if game over
 */
public boolean isPlaying(){
}

public void rollDice()

public void repaintBoard(Graphics g)

public Player getCurrentPlayer()

public void testHypothesis(Set<String> hypothesis)

public void movePlayer()

public List<Token> getTokens()


Player:
----------------------------------

/**Constructor for class Player
 *@param name Player name. Should be a character name from cluedo
 *@param start Start position of player on board
 */
public Player(String name, Coordinate start){}

/**Adds card to players hand
  *@param card Card to add to hand
  */
public void addCardToHand(Card card){}

/**Sets players position to the argument position
 * Assumes legality of move has already been checked
 *@param move Coordinates to move to
 */
public void move(Coordinate move){}

/**Checks if a given card is in the player's hand
 *@param card Card to check is in player's hand
 *@return Boolean representing if card is in hand
 */
public boolean cardInHand(Card card){}

public void repaint(Graphics g){}


Card:
------------------------------------

/**Constructor for class Card
 * Assumes type matches the value
 *@param type Type of card
 *@param value Value of card
 */
public Card(Type type, String value){}

/*Needs good hash code and equals methods*/

public void repaint(Graphics g){}


Coordinate:
---------------------------------------

/**Constructor for class Coordinate
 *@param x X-value
 *@param y Y-value
 */
public Coordinate(int x, int y){}

/**@return x value of coordinate
 */
public int getX(){}

/**@return y value of coordinate
 */
public int getY(){}

/**@return string representation of coordinate
 */
public String toString(){}


Board:
----------------------------------------

/**Checks if the given coordinate is legal for
 * this board (Might have use for testing? Shouldn't
 * need it if everything goes well)
 *@param coord Coordinate to check
 *@return Boolean representing legality of coordinate
 */
public boolean isLegal(Coordinate coord){}

/**Checks if the given coordinate is in a room. Returns
 * string name of room. ("Hallway" if player is not in a
 * room?)
 *@param coord Coordinate to check
 *@return String name of room coordinate is in
 */
public String getRoom(Coordinate coord){}


public Coordinate findMove(Coordinate clicked, Coordinate start, int steps){}

public void highlightMoves(Coordinate start, int steps){}

public void toggleOccupied(Coordinate c){}

public void unhighlight(){}

public void repaint(Graphics g)


CluedoFrame extends JFrame
---------------------------

public void repaint()

public void showRules()

public void showTurn()

public void showGameOver()

public void nextTurn()

public void showGameSetup()


interface CluedoPanel extends JPanel
-------------------------------------

public void nextTurn()


MenuPanel
-----------

public MenuPanel(Controller c)

Buttons:
"New Game"
"Rules"
"Exit"


DeckPanel
--------------

public DeckPanel(Controller c, Player p)

Buttons:
"Roll Dice"


PlayerPanel
-----------------

public PlayerPanel(Set<Player> players)


BoardPanel implements MouseListener
------------------

public BoardPanel(Controller c)


TurnPanel
----------------

public TurnPanel(Controller c)


HypothesisPanel
-----------------

public HypothesisPanel(Controller c)


GameOverPanel
----------------

public GameOverPanel(Controller c)

Buttons:
"New Game"
"Exit"


/** Creates a GameSetupDialog and returns the result
of the player setup when requested. */
GameSetupPanel(Controller c) 
----------------
public Map<String,String> getResult()



Token (interface)
----------------
public String getName()

public void setPosition(Coordinate c)

public Coordinate getPosition()